/*
 * Copyright 2010-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

package software.amazon.awssdk.services.cognitosync;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Collections;
import java.util.List;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import software.amazon.awssdk.auth.StaticCredentialsProvider;
import software.amazon.awssdk.services.cognitoidentity.CognitoIdentityClient;
import software.amazon.awssdk.services.cognitoidentity.model.CreateIdentityPoolRequest;
import software.amazon.awssdk.services.cognitoidentity.model.CreateIdentityPoolResult;
import software.amazon.awssdk.services.cognitoidentity.model.DeleteIdentityPoolRequest;
import software.amazon.awssdk.services.cognitoidentity.model.GetIdRequest;
import software.amazon.awssdk.services.cognitoidentity.model.GetIdResult;
import software.amazon.awssdk.services.cognitosync.model.Dataset;
import software.amazon.awssdk.services.cognitosync.model.DeleteDatasetRequest;
import software.amazon.awssdk.services.cognitosync.model.DescribeDatasetRequest;
import software.amazon.awssdk.services.cognitosync.model.DescribeDatasetResult;
import software.amazon.awssdk.services.cognitosync.model.DescribeIdentityPoolUsageRequest;
import software.amazon.awssdk.services.cognitosync.model.DescribeIdentityPoolUsageResult;
import software.amazon.awssdk.services.cognitosync.model.DescribeIdentityUsageRequest;
import software.amazon.awssdk.services.cognitosync.model.DescribeIdentityUsageResult;
import software.amazon.awssdk.services.cognitosync.model.IdentityPoolUsage;
import software.amazon.awssdk.services.cognitosync.model.IdentityUsage;
import software.amazon.awssdk.services.cognitosync.model.ListRecordsRequest;
import software.amazon.awssdk.services.cognitosync.model.ListRecordsResult;
import software.amazon.awssdk.services.cognitosync.model.Operation;
import software.amazon.awssdk.services.cognitosync.model.Record;
import software.amazon.awssdk.services.cognitosync.model.RecordPatch;
import software.amazon.awssdk.services.cognitosync.model.UpdateRecordsRequest;
import software.amazon.awssdk.services.cognitosync.model.UpdateRecordsResult;
import software.amazon.awssdk.test.AwsTestBase;

public class CognitoSyncIntegrationTest extends AwsTestBase {

    /**
     * Identity pool name created for testing.
     */
    private static final String IDENTITY_POOL_NAME = "javasdkpool"
                                                     + System.currentTimeMillis();
    /**
     * Name of the data set associated with an identity used for testing.
     */
    private static final String DATASET_NAME = "dataset"
                                               + System.currentTimeMillis();
    /**
     * AWS account id for which the identity id's are generated.
     */
    private static final String AWS_ACCOUNT_ID = "599169622985";
    /**
     * Provider supported by the identity pool and associated with the
     * identities.
     */
    private static final String PROVIDER = "foo";
    /** APP id for the provider associated with the identity pool. */
    private static final String APP_ID = "fooId";
    /**
     * Reference to the Amazon Cognito Identity client
     */
    private static CognitoIdentityClient identity;
    /**
     * Reference to the Amazon Cognito Sync client
     */
    private static CognitoSyncClient sync;
    /**
     * Identity pool id generated by the Amazon Cognito service.
     */
    private static String identityPoolId = null;
    /**
     * Identity id generated by the Amazon Cognito Service.
     */
    private static String identityId = null;

    /**
     * Sets up the Amazon Cognito Identity and Sync client. Creates a new
     * identity pool and an Cognito Identity for the pool.
     */
    @BeforeClass
    public static void setUp() throws FileNotFoundException, IOException {
        setUpCredentials();
        identity = CognitoIdentityClient.builder().credentialsProvider(new StaticCredentialsProvider(credentials)).build();
        sync = CognitoSyncClient.builder().credentialsProvider(new StaticCredentialsProvider(credentials)).build();

        CreateIdentityPoolRequest createRequest = CreateIdentityPoolRequest.builder()
                                                                           .identityPoolName(IDENTITY_POOL_NAME)
                                                                           .allowUnauthenticatedIdentities(true)
                                                                           .supportedLoginProviders(
                                                                                   Collections.singletonMap(PROVIDER, APP_ID))
                                                                           .build();
        CreateIdentityPoolResult result = identity
                .createIdentityPool(createRequest);
        identityPoolId = result.identityPoolId();

        GetIdResult getIdResult =
                identity.getId(GetIdRequest.builder().identityPoolId(identityPoolId).accountId(AWS_ACCOUNT_ID).build());
        identityId = getIdResult.identityId();

    }

    /**
     * Deletes the data set associated with the identity. Also deletes the
     * identity pool created for testing.
     */
    @AfterClass
    public static void tearDown() {

        if (DATASET_NAME != null) {
            sync.deleteDataset(DeleteDatasetRequest.builder()
                                                   .datasetName(DATASET_NAME).identityId(identityId)
                                                   .identityPoolId(identityPoolId).build());
        }

        if (identityPoolId != null) {
            identity.deleteIdentityPool(DeleteIdentityPoolRequest.builder()
                                                                 .identityPoolId(identityPoolId).build());
        }
    }

    /**
     * Tests the Amazon Cognito sync functions.
     */
    @Test
    public void testCognitoSync() {
        testUpdateRecordPatches();
        testIdentityPoolUsage();
        testIdentityUsage();
    }

    /**
     * Tests the identity pool usage operation. Asserts
     */
    public void testIdentityPoolUsage() {
        DescribeIdentityPoolUsageResult describeIdentityPoolUsageResult = sync
                .describeIdentityPoolUsage(DescribeIdentityPoolUsageRequest.builder()
                                                                           .identityPoolId(identityPoolId).build());
        IdentityPoolUsage identityPoolUsage = describeIdentityPoolUsageResult
                .identityPoolUsage();
        assertEquals(identityPoolUsage.identityPoolId(), identityPoolId);
    }

    /**
     * Tests the describe identity usage operation for a given identity id.
     * Asserts that the number of data sets associated with the identity is 1.
     */
    public void testIdentityUsage() {
        DescribeIdentityUsageRequest describeIdentityUsageRequest = DescribeIdentityUsageRequest.builder()
                                                                                                .identityId(identityId)
                                                                                                .identityPoolId(identityPoolId)
                                                                                                .build();
        DescribeIdentityUsageResult describeIdentityUsageResult = sync
                .describeIdentityUsage(describeIdentityUsageRequest);
        IdentityUsage identityUsage = describeIdentityUsageResult
                .identityUsage();
        assertEquals(identityUsage.datasetCount(), Integer.valueOf(1));
        assertTrue(identityUsage.dataStorage() >= Long.valueOf(0));
    }

    /**
     * Tests the record creations, record updates and record removal for a data
     * set in the given identity.
     *
     * Asserts that sync count at each case is incremented every time a record
     * is updated. Also asserts that the number of records in data set after
     * removal.
     */
    public void testUpdateRecordPatches() {
        RecordPatch record1 = RecordPatch.builder().key("foo1")
                                         .value("bar1").op(Operation.Replace).syncCount(0L).build();
        RecordPatch record2 = RecordPatch.builder().key("foo2")
                                         .value("bar2").op(Operation.Replace).syncCount(0L).build();

        ListRecordsRequest listRecordsRequest = ListRecordsRequest.builder()
                                                                  .datasetName(DATASET_NAME)
                                                                  .identityPoolId(identityPoolId).identityId(identityId).build();

        ListRecordsResult listRecordsResult = sync
                .listRecords(listRecordsRequest);

        assertEquals(listRecordsResult.count(), Integer.valueOf(0));
        assertNotNull(listRecordsResult.syncSessionToken());

        UpdateRecordsRequest updateRequest = UpdateRecordsRequest.builder()
                                                                 .identityPoolId(identityPoolId).identityId(identityId)
                                                                 .datasetName(DATASET_NAME)
                                                                 .recordPatches(record1, record2)
                                                                 .syncSessionToken(listRecordsResult.syncSessionToken()).build();

        UpdateRecordsResult updateResult = sync.updateRecords(updateRequest);
        List<Record> records = updateResult.records();
        assertEquals(records.size(), 2);
        assertEquals(records.get(0).syncCount(), Long.valueOf(1));
        assertEquals(records.get(1).syncCount(), Long.valueOf(1));

        record1 = record1.toBuilder().value("bar3").syncCount(1L).build();

        listRecordsResult = sync.listRecords(listRecordsRequest);

        updateRequest = UpdateRecordsRequest.builder()
                                            .identityPoolId(identityPoolId).identityId(identityId)
                                            .datasetName(DATASET_NAME).recordPatches(record1)
                                            .syncSessionToken(listRecordsResult.syncSessionToken()).build();

        updateResult = sync.updateRecords(updateRequest);
        records = updateResult.records();
        assertEquals(records.size(), 1);
        assertEquals(records.get(0).syncCount(), Long.valueOf(2));

        DescribeDatasetRequest describeDatasetRequest = DescribeDatasetRequest.builder()
                                                                              .datasetName(DATASET_NAME).identityId(identityId)
                                                                              .identityPoolId(identityPoolId).build();

        DescribeDatasetResult describeDatasetResult = sync
                .describeDataset(describeDatasetRequest);

        Dataset dataset = describeDatasetResult.dataset();

        assertEquals(dataset.datasetName(), DATASET_NAME);
        assertEquals(dataset.numRecords(), Long.valueOf(2));

        record1 = record1.toBuilder().op(Operation.Remove).syncCount(2L).build();

        updateRequest = UpdateRecordsRequest.builder()
                                            .identityPoolId(identityPoolId).identityId(identityId)
                                            .datasetName(DATASET_NAME).recordPatches(record1)
                                            .syncSessionToken(listRecordsResult.syncSessionToken()).build();

        updateResult = sync.updateRecords(updateRequest);
        records = updateResult.records();
        assertEquals(records.size(), 1);
    }
}
