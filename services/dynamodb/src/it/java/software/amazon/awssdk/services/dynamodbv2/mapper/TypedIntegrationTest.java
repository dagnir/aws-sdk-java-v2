/*
 * Copyright 2010-2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
package software.amazon.awssdk.services.dynamodbv2.mapper;

import static org.junit.Assert.assertEquals;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.Test;
import software.amazon.awssdk.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedDefault;
import software.amazon.awssdk.services.dynamodbv2.datamodeling.DynamoDBMapperFieldModel.DynamoDBAttributeType;
import software.amazon.awssdk.services.dynamodbv2.datamodeling.DynamoDBTable;
import software.amazon.awssdk.services.dynamodbv2.datamodeling.DynamoDBTyped;
import software.amazon.awssdk.services.dynamodbv2.model.AttributeValue;
import software.amazon.awssdk.services.dynamodbv2.pojos.AutoKeyAndVal;

/**
 * Status tests for {@code Typed}.
 */
public class TypedIntegrationTest extends AbstractKeyAndValIntegrationTestCase {

    /**
     * test object.
     */
    @DynamoDBTable(tableName = "aws-java-sdk-util")
    public static class KeyAndBinaryUuid extends AutoKeyAndVal<UUID> {
        @DynamoDBTyped(DynamoDBAttributeType.B)
        public UUID getVal() {
            return super.getVal();
        }

        @Override
        public void setVal(final UUID val) {
            super.setVal(val);
        }
    }

    /**
     * Test the mappings.
     */
    @Test
    public void testMarshalling() {
        final KeyAndBinaryUuid object = new KeyAndBinaryUuid();
        object.setVal(UUID.randomUUID());
        assertBeforeAndAfterChange(false, object);
    }

    /**
     * An object with an enumeration.
     */
    @DynamoDBTable(tableName = "aws-java-sdk-util")
    public static class KeyAndStatus extends AutoKeyAndVal<KeyAndStatus.Status> {
        public static enum Status {
            X,
            Y,
            Z
        }

        ;

        @DynamoDBTyped(DynamoDBAttributeType.S)
        public Status getVal() {
            return super.getVal();
        }

        @Override
        public void setVal(final Status val) {
            super.setVal(val);
        }
    }

    /**
     * Test with a null enum val.
     */
    @Test
    public void testNullEnumValue() {
        final KeyAndStatus object = new KeyAndStatus();
        assertBeforeAndAfterChange(false, object);
    }

    /**
     * Test with a non-null enum val.
     */
    @Test
    public void testEnumMarshalling() {
        final KeyAndStatus object = new KeyAndStatus();
        object.setVal(KeyAndStatus.Status.Y);
        assertBeforeAndAfterChange(false, object);
    }

    /**
     * An object with an enumeration.
     */
    @DynamoDBTable(tableName = "aws-java-sdk-util")
    public static class KeyAndDefaultStatus extends KeyAndStatus {
        @DynamoDBAutoGeneratedDefault("Z")
        @DynamoDBTyped(DynamoDBAttributeType.S)
        public Status getVal() {
            return super.getVal();
        }
    }

    /**
     * Test with a null enum val.
     */
    @Test
    public void testDefaultEnumValue() {
        final KeyAndDefaultStatus object = new KeyAndDefaultStatus();
        final KeyAndStatus.Status value = assertBeforeAndAfterChange(true, object);
        assertEquals(KeyAndStatus.Status.Z, value);
    }

    /**
     * test object.
     */
    @DynamoDBTable(tableName = "aws-java-sdk-util")
    public static class KeyAndNativeValue extends AutoKeyAndVal<AttributeValue> {
        @DynamoDBTyped(DynamoDBAttributeType.M)
        public AttributeValue getVal() {
            return super.getVal();
        }

        @Override
        public void setVal(final AttributeValue val) {
            super.setVal(val);
        }
    }

    /**
     * Test the mappings.
     */
    @Test
    public void testNativeMap() {
        final Map<String, AttributeValue> map = new HashMap<String, AttributeValue>();
        map.put("A", new AttributeValue().withN("123"));

        final KeyAndNativeValue object = new KeyAndNativeValue();
        object.setVal(new AttributeValue().withM(map));
        assertBeforeAndAfterChange(false, object);
    }

}
